name: Xcode - Build and Analyze

on:
  push:
    tags:
      - 'v*'
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Select latest Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build & Analyze
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}

  release:
    name: Archive and Upload App
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select latest Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      - name: Set Default Scheme
        id: scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo "scheme=$default" >> $GITHUB_OUTPUT

      - name: Build Release .app
        run: |
          scheme=${{ steps.scheme.outputs.scheme }}
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi

          # 构建 Release
          xcodebuild -scheme "$scheme" \
            -configuration Release \
            -"$filetype_parameter" "$file_to_build" \
            -derivedDataPath build \
            ARCHS="arm64 x86_64" \
            ONLY_ACTIVE_ARCH=NO

      - name: Package .app
        run: |
          APP_PATH="build/Build/Products/Release/*.app"
          ZIP_NAME="StretchReminder-universal-${{ github.ref_name }}.zip"
          ditto -c -k --sequesterRsrc --keepParent $APP_PATH $ZIP_NAME
          echo "ZIP_PATH=$ZIP_NAME" >> $GITHUB_ENV

      - name: Checkout gh-pages into updates/
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: updates

      - name: Generate appcast.xml
        env:
          SPARKLE_VERSION: 2.7.1
          PRIVATE_KEY_SECRET: ${{ secrets.SPARKLE_EDDSA_PRIVATE_KEY }}
        run: |
          mkdir -p Sparkle
          curl -L -o Sparkle/sparkle.tar.xz \
            "https://github.com/sparkle-project/Sparkle/releases/download/$SPARKLE_VERSION/Sparkle-$SPARKLE_VERSION.tar.xz"
          tar -xf Sparkle/sparkle.tar.xz -C Sparkle
          chmod +x "Sparkle/bin/generate_appcast"
          mv -f "${{ env.ZIP_PATH }}" updates/
          echo "$PRIVATE_KEY_SECRET" \
            | "Sparkle/bin/generate_appcast" \
                --ed-key-file - \
                updates \

      - name: Deploy appcast to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages             # 目标分支
          publish_dir: updates                 # 要推送的目录
          commit_message: "chore: release for ${{ github.ref_name }}"

      - name: Upload .app to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            updates/${{ env.ZIP_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
